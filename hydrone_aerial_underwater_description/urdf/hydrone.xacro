<?xml version="1.0"?>

<robot name="hydrone" xmlns:xacro="http://ros.org/wiki/xacro">
  <!-- Properties -->
  <xacro:property name="namespace" value="$(arg namespace)" />
  <xacro:property name="rotor_velocity_slowdown_sim" value="10" />
  <xacro:property name="use_mesh_file" value="true" />
  <xacro:property name="mesh_file" value="package://hydrone_aerial_description/meshes/hydrone_base.dae" />
  <xacro:property name="rotor_1_mesh_file" value="package://hydrone_aerial_description/meshes/aerial_propeller_1.dae" />
  <xacro:property name="rotor_2_mesh_file" value="package://hydrone_aerial_description/meshes/aerial_propeller_2.dae" />
  <xacro:property name="mass" value="1.5" /> <!-- [kg] -->
  <xacro:property name="body_width" value="0.47" /> <!-- [m] -->
  <xacro:property name="body_height" value="0.09" /> <!-- [m] -->
  <xacro:property name="mass_rotor" value="0.005" /> <!-- [kg] -->
  <xacro:property name="arm_length_front_x" value="0.19725" /> <!-- [m] -->
  <xacro:property name="arm_length_back_x" value="0.19725" /> <!-- [m] -->
  <xacro:property name="arm_length_front_y" value="0.19725" /> <!-- [m] -->
  <xacro:property name="arm_length_back_y" value="0.19725" /> <!-- [m] -->
  <xacro:property name="rotor_offset_top" value="0.04" /> <!-- [m] -->
  <xacro:property name="radius_rotor" value="0.195" /> <!-- [m] -->
  <xacro:property name="motor_constant" value="8.54858e-06" /> <!-- [kg.m/s^2] -->
  <xacro:property name="moment_constant" value="0.016" /> <!-- [m] -->
  <xacro:property name="time_constant_up" value="0.0125" /> <!-- [s] -->
  <xacro:property name="time_constant_down" value="0.025" /> <!-- [s] -->
  <xacro:property name="max_rot_velocity" value="838" /> <!-- [rad/s] -->
  <xacro:property name="sin30" value="0.5" />
  <xacro:property name="cos30" value="0.866025403784" />
  <xacro:property name="sqrt2" value="1.4142135623730951" />
  <xacro:property name="rotor_drag_coefficient" value="8.06428e-05" />
  <xacro:property name="rolling_moment_coefficient" value="0.000001" />
  <xacro:property name="mesh_pos_x" value="-0.2175" /> <!-- [m] -->
  <xacro:property name="mesh_pos_y" value="0.2175" /> <!-- [m] -->
  <xacro:property name="mesh_pos_z" value="-0.05" /> <!-- [m] -->
  <xacro:property name="mesh_ori_x" value="1.5707" /> <!-- [m] -->
  <xacro:property name="mesh_ori_y" value="0.0" /> <!-- [m] -->
  <xacro:property name="mesh_ori_z" value="0.0" /> <!-- [m] -->
  <xacro:property name="mesh_aerprop_pos_x" value="0.1905" /> <!-- [m] -->
  <xacro:property name="mesh_aerprop_pos_y" value="-0.0205" /> <!-- [m] -->
  <xacro:property name="mesh_aerprop_pos_z" value="0.01" /> <!-- [m] -->
  <xacro:property name="mesh_aerprop_ori_x" value="-1.5707" /> <!-- [m] -->
  <xacro:property name="mesh_aerprop_ori_y" value="0.0" /> <!-- [m] -->
  <xacro:property name="mesh_aerprop_ori_z" value="1.5707" /> <!-- [m] -->
  

  <!-- Property Blocks -->
  <xacro:property name="body_inertia">
    <inertia ixx="0.0347563" ixy="0.0" ixz="0.0" iyy="0.0458929" iyz="0.0" izz="0.0977" /> <!-- [kg.m^2] [kg.m^2] [kg.m^2] [kg.m^2] [kg.m^2] [kg.m^2] -->
  </xacro:property>

  <!-- inertia of a single rotor, assuming it is a cuboid. Height=3mm, width=15mm -->
  <xacro:property name="rotor_inertia">
    <xacro:box_inertia x="${radius_rotor}" y="0.015" z="0.003" mass="${mass_rotor*rotor_velocity_slowdown_sim}" />
  </xacro:property>

  <!-- Included URDF Files -->
  <xacro:include filename="$(find hydrone_aerial_description)/urdf/multirotor_base.xacro" />

  <!-- Instantiate multirotor_base_macro once -->
  <xacro:multirotor_base_macro
    robot_namespace="${namespace}"
    mass="${mass}"
    color="White"
    body_width="${body_width}"
    body_height="${body_height}"
    use_mesh_file="${use_mesh_file}"
    mesh_file="${mesh_file}"
    mesh_pos_x="${mesh_pos_x}"
    mesh_pos_y="${mesh_pos_y}"
    mesh_pos_z="${mesh_pos_z}"
    mesh_ori_x="${mesh_ori_x}"
    mesh_ori_y="${mesh_ori_y}"
    mesh_ori_z="${mesh_ori_z}"
    >
    <xacro:insert_block name="body_inertia" />
  </xacro:multirotor_base_macro>

  <!-- Instantiate rotors -->
  <xacro:vertical_rotor
    robot_namespace="${namespace}"
    suffix="front_right"
    direction="ccw"
    motor_constant="${motor_constant}"
    moment_constant="${moment_constant}"
    parent="${namespace}/base_link"
    mass_rotor="${mass_rotor}"
    radius_rotor="${radius_rotor}"
    time_constant_up="${time_constant_up}"
    time_constant_down="${time_constant_down}"
    max_rot_velocity="${max_rot_velocity}"
    motor_number="0"
    rotor_drag_coefficient="${rotor_drag_coefficient}"
    rolling_moment_coefficient="${rolling_moment_coefficient}"
    color="Red"
    use_own_mesh="true"
    mesh_pos_x="${mesh_aerprop_pos_x}"
    mesh_pos_y="${mesh_aerprop_pos_y}"
    mesh_pos_z="${mesh_aerprop_pos_z}"
    mesh_ori_x="${mesh_aerprop_ori_x}"
    mesh_ori_y="${mesh_aerprop_ori_y}"
    mesh_ori_z="${mesh_aerprop_ori_z}"
    mesh="${rotor_2_mesh_file}">
    <origin xyz="${arm_length_front_x} -${arm_length_front_y} ${rotor_offset_top}" rpy="0 0 0" />
    <xacro:insert_block name="rotor_inertia" />
  </xacro:vertical_rotor>

  <xacro:vertical_rotor
    robot_namespace="${namespace}"
    suffix="back_left"
    direction="ccw"
    motor_constant="${motor_constant}"
    moment_constant="${moment_constant}"
    parent="${namespace}/base_link"
    mass_rotor="${mass_rotor}"
    radius_rotor="${radius_rotor}"
    time_constant_up="${time_constant_up}"
    time_constant_down="${time_constant_down}"
    max_rot_velocity="${max_rot_velocity}"
    motor_number="1"
    rotor_drag_coefficient="${rotor_drag_coefficient}"
    rolling_moment_coefficient="${rolling_moment_coefficient}"
    color="Red"
    use_own_mesh="true"
    mesh_pos_x="${mesh_aerprop_pos_x}"
    mesh_pos_y="${mesh_aerprop_pos_y}"
    mesh_pos_z="${mesh_aerprop_pos_z}"
    mesh_ori_x="${mesh_aerprop_ori_x}"
    mesh_ori_y="${mesh_aerprop_ori_y}"
    mesh_ori_z="${mesh_aerprop_ori_z}"
    mesh="${rotor_2_mesh_file}">
    <origin xyz="-${arm_length_back_x} ${arm_length_back_y} ${rotor_offset_top}" rpy="0 0 0" />
    <xacro:insert_block name="rotor_inertia" />
  </xacro:vertical_rotor>

  <xacro:vertical_rotor robot_namespace="${namespace}"
    suffix="front_left"
    direction="cw"
    motor_constant="${motor_constant}"
    moment_constant="${moment_constant}"
    parent="${namespace}/base_link"
    mass_rotor="${mass_rotor}"
    radius_rotor="${radius_rotor}"
    time_constant_up="${time_constant_up}"
    time_constant_down="${time_constant_down}"
    max_rot_velocity="${max_rot_velocity}"
    motor_number="2"
    rotor_drag_coefficient="${rotor_drag_coefficient}"
    rolling_moment_coefficient="${rolling_moment_coefficient}"
    color="Red"
    use_own_mesh="true"
    mesh_pos_x="${mesh_aerprop_pos_x}"
    mesh_pos_y="${mesh_aerprop_pos_y}"
    mesh_pos_z="${mesh_aerprop_pos_z}"
    mesh_ori_x="${mesh_aerprop_ori_x}"
    mesh_ori_y="${mesh_aerprop_ori_y}"
    mesh_ori_z="${mesh_aerprop_ori_z}"
    mesh="${rotor_1_mesh_file}">
    <origin xyz="${arm_length_front_x} ${arm_length_front_y} ${rotor_offset_top}" rpy="0 0 0" />
    <xacro:insert_block name="rotor_inertia" />
  </xacro:vertical_rotor>

  <xacro:vertical_rotor robot_namespace="${namespace}"
    suffix="back_right"
    direction="cw"
    motor_constant="${motor_constant}"
    moment_constant="${moment_constant}"
    parent="${namespace}/base_link"
    mass_rotor="${mass_rotor}"
    radius_rotor="${radius_rotor}"
    time_constant_up="${time_constant_up}"
    time_constant_down="${time_constant_down}"
    max_rot_velocity="${max_rot_velocity}"
    motor_number="3"
    rotor_drag_coefficient="${rotor_drag_coefficient}"
    rolling_moment_coefficient="${rolling_moment_coefficient}"
    color="Red"
    use_own_mesh="true"
    mesh_pos_x="${mesh_aerprop_pos_x}"
    mesh_pos_y="${mesh_aerprop_pos_y}"
    mesh_pos_z="${mesh_aerprop_pos_z}"
    mesh_ori_x="${mesh_aerprop_ori_x}"
    mesh_ori_y="${mesh_aerprop_ori_y}"
    mesh_ori_z="${mesh_aerprop_ori_z}"
    mesh="${rotor_1_mesh_file}">
    <origin xyz="-${arm_length_back_x} -${arm_length_back_y} ${rotor_offset_top}" rpy="0 0 0" />
    <xacro:insert_block name="rotor_inertia" />
  </xacro:vertical_rotor>





  <xacro:include filename="$(find uuv_descriptions)/urdf/common.urdf.xacro"/>
  <xacro:include filename="$(find uuv_sensor_ros_plugins)/urdf/sensor_snippets.xacro"/>
  <xacro:include filename="$(find uuv_gazebo_ros_plugins)/urdf/snippets.xacro"/>


  <joint name="${namespace}/thruster_1_joint" type="continuous">
      <origin xyz="0.19725 -0.19725 -0.055" rpy="0 0 0"/>
      <axis xyz="0 0 1"/>
      <parent link="${namespace}/base_link"/>
      <child link="${namespace}/thruster_1"/>
    </joint>

  <link name="${namespace}/thruster_1">
      <!-- <xacro:box_inertial x="0" y="0" z="0" mass="0.0001">
        <origin xyz="0 0 0" rpy="0 0 0"/>
      </xacro:box_inertial> -->
      <!-- <xacro:box_inertial x="0.000088464" y="0.000092478" z="0.000152266" mass="0.011">
        <origin xyz="0 0 0" rpy="0 0 0"/>
      </xacro:box_inertial> -->    

      <visual>
        <origin xyz="-0.03 -0.0315 -0.01" rpy="0 0 0"/>
        <geometry>
          <mesh filename="file://$(find hydrone_aerial_underwater_description)/meshes/aquatic_propeller_1.dae" scale="1 1 1"/>
        </geometry>        
      </visual>

      <collision>
        <!--<origin xyz="-0.03 -0.0315 -0.01" rpy="0 0 0"/>
         <geometry>
          <mesh filename="file://$(find hydrone_aerial_underwater_description)/meshes/aquatic_propeller_1.dae" scale="1 1 1"/>          
        </geometry> -->
        
        <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
        <geometry>
          <box size="0.06 0.06 0.04"/>
        </geometry>
      </collision>
    </link>

    <gazebo>
      <plugin name="${namespace}_0_thruster_model" filename="libuuv_thruster_ros_plugin.so">        
        <!-- Name of the thruster link -->
        <linkName>${namespace}/thruster_1</linkName>
        <!-- Name of the joint between thruster and vehicle base link -->
        <jointName>${namespace}/thruster_1_joint</jointName>
        <!-- Make the thruster aware of its id -->
        <thrusterID>1</thrusterID>
        <!-- Gain of the input command signal -->
        <gain>1</gain>
        <!-- Maximum allowed input value for the input signal for thruster unit -->
        <clampMax>-3000</clampMax>
        <!-- Minimum allowed value for the input signal for thruster unit -->
        <clampMin>3000</clampMin>
        <!-- Minimum and maximum thrust force output allowed -->
        <thrustMin>-1000</thrustMin>
        <thrustMax>1000</thrustMax>
        <!--
        Value from 0 to 1 to set the efficiency of the output thrust force
        Default value is 1.0
        -->
        <thrust_efficiency>1</thrust_efficiency>
        <!--
        Value from 0 to 1 to set the efficiency of the propeller as a factor
        to be multiplied to the current value of the state variable at each
        iteration.
        Default value is 1.0
        -->
        <propeller_efficiency>1</propeller_efficiency>

        <dynamics>
          <type>FirstOrder</type>
          <timeConstant>0.05</timeConstant>
        </dynamics>

        <conversion>
          <type>Basic</type>
          <rotorConstant>0.00031</rotorConstant>
        </conversion>  
      </plugin>
    </gazebo>

    <gazebo reference="${namespace}/thruster_1">
      <selfCollide>false</selfCollide>
      <material>Gazebo/Blue</material>
    </gazebo>




    <joint name="${namespace}/thruster_2_joint" type="continuous">
      <origin xyz="0.19725 0.19725 -0.055" rpy="0 0 0"/>
      <axis xyz="0 0 -1"/>
      <parent link="${namespace}/base_link"/>
      <child link="${namespace}/thruster_2"/>
    </joint>

    <link name="${namespace}/thruster_2">
      <!-- <xacro:box_inertial x="0" y="0" z="0" mass="0.0001">
        <origin xyz="0 0 0" rpy="0 0 0"/>
      </xacro:box_inertial> -->
      
      <collision>
        <!-- <origin xyz="-0.03 -0.0315 -0.01" rpy="0 0 0"/>
        <geometry>
          <mesh filename="file://$(find hydrone_aerial_underwater_description)/meshes/aquatic_propeller.dae" scale="1 1 1"/>          
        </geometry> -->

        <origin xyz="-0.0 -0.0 -0.0" rpy="0 0 0"/>
        <geometry>
          <box size="0.06 0.06 0.04"/>
        </geometry>
      </collision>

      <visual>
        <origin xyz="-0.03 -0.0315 -0.01" rpy="0 0 0"/>
        <geometry>
          <mesh filename="file://$(find hydrone_aerial_underwater_description)/meshes/aquatic_propeller.dae" scale="1 1 1"/>
        </geometry>        
      </visual>
    </link>

    <gazebo>
      <plugin name="${namespace}_2_thruster_model" filename="libuuv_thruster_ros_plugin.so">        
        <!-- Name of the thruster link -->
        <linkName>${namespace}/thruster_2</linkName>
        <!-- Name of the joint between thruster and vehicle base link -->
        <jointName>${namespace}/thruster_2_joint</jointName>
        <!-- Make the thruster aware of its id -->
        <thrusterID>2</thrusterID>
        <!-- Gain of the input command signal -->
        <gain>1</gain>
        <!-- Maximum allowed input value for the input signal for thruster unit -->
        <clampMax>-3000</clampMax>
        <!-- Minimum allowed value for the input signal for thruster unit -->
        <clampMin>3000</clampMin>
        <!-- Minimum and maximum thrust force output allowed -->
        <thrustMin>-1000</thrustMin>
        <thrustMax>1000</thrustMax>
        <!--
        Value from 0 to 1 to set the efficiency of the output thrust force
        Default value is 1.0
        -->
        <thrust_efficiency>1</thrust_efficiency>
        <!--
        Value from 0 to 1 to set the efficiency of the propeller as a factor
        to be multiplied to the current value of the state variable at each
        iteration.
        Default value is 1.0
        -->
        <propeller_efficiency>1</propeller_efficiency>

        <dynamics>
          <type>FirstOrder</type>
          <timeConstant>0.05</timeConstant>
        </dynamics>

        <conversion>
          <type>Basic</type>
          <rotorConstant>0.00031</rotorConstant>
        </conversion>  
      </plugin>
    </gazebo>

    <gazebo reference="${namespace}/thruster_2">
      <selfCollide>false</selfCollide>
      <material>Gazebo/Blue</material>
    </gazebo>

   



    <joint name="${namespace}/thruster_3_joint" type="continuous">
      <origin xyz="-0.19725 0.19725 -0.055" rpy="0 0 0"/>
      <axis xyz="0 0 1"/>
      <parent link="${namespace}/base_link"/>
      <child link="${namespace}/thruster_3"/>
    </joint>

    <link name="${namespace}/thruster_3">
      <!-- <xacro:box_inertial x="0" y="0" z="0" mass="0.0001">
        <origin xyz="0 0 0" rpy="0 0 0"/>
      </xacro:box_inertial> -->
      
      <collision>
        <!-- <origin xyz="-0.03 -0.0315 -0.01" rpy="0 0 0"/>
        <geometry>
          <mesh filename="file://$(find hydrone_aerial_underwater_description)/meshes/aquatic_propeller_1.dae" scale="1 1 1"/>          
        </geometry> -->

        <origin xyz="-0.0 -0.0 -0.0" rpy="0 0 0"/>
        <geometry>
          <box size="0.06 0.06 0.04"/>
        </geometry>
      </collision>

      <visual>
        <origin xyz="-0.03 -0.0315 -0.01" rpy="0 0 0"/>
        <geometry>
          <mesh filename="file://$(find hydrone_aerial_underwater_description)/meshes/aquatic_propeller_1.dae" scale="1 1 1"/>
        </geometry>        
      </visual>
    </link>

    <gazebo>
      <plugin name="${namespace}_3_thruster_model" filename="libuuv_thruster_ros_plugin.so">        
        <!-- Name of the thruster link -->
        <linkName>${namespace}/thruster_3</linkName>
        <!-- Name of the joint between thruster and vehicle base link -->
        <jointName>${namespace}/thruster_3_joint</jointName>
        <!-- Make the thruster aware of its id -->
        <thrusterID>3</thrusterID>
        <!-- Gain of the input command signal -->
        <gain>1</gain>
        <!-- Maximum allowed input value for the input signal for thruster unit -->
        <clampMax>-3000</clampMax>
        <!-- Minimum allowed value for the input signal for thruster unit -->
        <clampMin>3000</clampMin>
        <!-- Minimum and maximum thrust force output allowed -->
        <thrustMin>-1000</thrustMin>
        <thrustMax>1000</thrustMax>
        <!--
        Value from 0 to 1 to set the efficiency of the output thrust force
        Default value is 1.0
        -->
        <thrust_efficiency>1</thrust_efficiency>
        <!--
        Value from 0 to 1 to set the efficiency of the propeller as a factor
        to be multiplied to the current value of the state variable at each
        iteration.
        Default value is 1.0
        -->
        <propeller_efficiency>1</propeller_efficiency>

        <dynamics>
          <type>FirstOrder</type>
          <timeConstant>0.05</timeConstant>
        </dynamics>

        <conversion>
          <type>Basic</type>
          <rotorConstant>0.00031</rotorConstant>
        </conversion>  
      </plugin>
    </gazebo>

    <gazebo reference="${namespace}/thruster_3">
      <selfCollide>false</selfCollide>
      <material>Gazebo/Blue</material>
    </gazebo>



    <joint name="${namespace}/thruster_4_joint" type="continuous">
      <origin xyz="-0.19725 -0.19725 -0.055" rpy="0 0 0"/>
      <axis xyz="0 0 -1"/>
      <parent link="${namespace}/base_link"/>
      <child link="${namespace}/thruster_4"/>
    </joint>

    <link name="${namespace}/thruster_4">
      <!-- <xacro:box_inertial x="0" y="0" z="0" mass="0.0001">
        <origin xyz="0 0 0" rpy="0 0 0"/>
      </xacro:box_inertial> -->
      
      <collision>
        <!-- <origin xyz="-0.03 -0.0315 -0.01" rpy="0 0 0"/>
        <geometry>
          <mesh filename="file://$(find hydrone_aerial_underwater_description)/meshes/aquatic_propeller.dae" scale="1 1 1"/>          
        </geometry> -->

        <origin xyz="-0.0 -0.0 -0.0" rpy="0 0 0"/>
        <geometry>
          <box size="0.06 0.06 0.04"/>
        </geometry>
      </collision>

      <visual>
        <origin xyz="-0.03 -0.0315 -0.01" rpy="0 0 0"/>
        <geometry>
          <mesh filename="file://$(find hydrone_aerial_underwater_description)/meshes/aquatic_propeller.dae" scale="1 1 1"/>
        </geometry>        
      </visual>
    </link>

    <gazebo>
      <plugin name="${namespace}_4_thruster_model" filename="libuuv_thruster_ros_plugin.so">        
        <!-- Name of the thruster link -->
        <linkName>${namespace}/thruster_4</linkName>
        <!-- Name of the joint between thruster and vehicle base link -->
        <jointName>${namespace}/thruster_4_joint</jointName>
        <!-- Make the thruster aware of its id -->
        <thrusterID>4</thrusterID>
        <!-- Gain of the input command signal -->
        <gain>1</gain>
        <!-- Maximum allowed input value for the input signal for thruster unit -->
        <clampMax>-3000</clampMax>
        <!-- Minimum allowed value for the input signal for thruster unit -->
        <clampMin>3000</clampMin>
        <!-- Minimum and maximum thrust force output allowed -->
        <thrustMin>-1000</thrustMin>
        <thrustMax>1000</thrustMax>
        <!--
        Value from 0 to 1 to set the efficiency of the output thrust force
        Default value is 1.0
        -->
        <thrust_efficiency>1</thrust_efficiency>
        <!--
        Value from 0 to 1 to set the efficiency of the propeller as a factor
        to be multiplied to the current value of the state variable at each
        iteration.
        Default value is 1.0
        -->
        <propeller_efficiency>1</propeller_efficiency>

        <dynamics>
          <type>FirstOrder</type>
          <timeConstant>0.05</timeConstant>
        </dynamics>

        <conversion>
          <type>Basic</type>
          <rotorConstant>0.00031</rotorConstant>
        </conversion>  
      </plugin>
    </gazebo>

    <gazebo reference="${namespace}/thruster_4">
      <selfCollide>false</selfCollide>
      <material>Gazebo/Blue</material>
    </gazebo>

    <xacro:insert_block name="gazebo"/>

</robot>
